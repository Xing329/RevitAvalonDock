using JetBrains.Annotations;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Media;
using System.Windows;


public static class VisualUtils
 {
     [CanBeNull]
     public static T FindVisualParent<T>(FrameworkElement element, string name) where T : FrameworkElement
     {
         var parentElement = (FrameworkElement)VisualTreeHelper.GetParent(element);
         while (parentElement != null)
         {
             if (parentElement is T parent)
                 if (parentElement.Name == name)
                     return parent;

             parentElement = (FrameworkElement)VisualTreeHelper.GetParent(parentElement);
         }

         return null;
     }

     public static T FindVisualChild<T>(FrameworkElement element, string name) where T : Visual
     {
         var zahl = VisualTreeHelper.GetChildrenCount(element);
         for (var i = 0; i < VisualTreeHelper.GetChildrenCount(element); i++)
         {
             var childElement = (FrameworkElement)VisualTreeHelper.GetChild(element, i);
             var childName = childElement.Name;
         }

         for (var i = 0; i < VisualTreeHelper.GetChildrenCount(element); i++)
         {
             var childElement = (FrameworkElement)VisualTreeHelper.GetChild(element, i);
             if (childElement is T child)
                 if (childElement.Name == name)
                     return child;

             var descendent = FindVisualChild<T>(childElement, name);
             if (descendent != null) return descendent;
         }

         return null;
     }

     public static T FindDirectVisualChild<T>(FrameworkElement element, string name) where T : Visual
     {
         for (var i = 0; i < VisualTreeHelper.GetChildrenCount(element); i++)
         {
             var childElement = (FrameworkElement)VisualTreeHelper.GetChild(element, i);
             if (childElement is T child)
                 if (childElement.Name == name)
                     return child;

             var descendent = FindVisualChild<T>(childElement, name);
             if (descendent != null) return descendent;
         }

         return null;
     }


     public static List<T> FindChildrenOfType<T>(DependencyObject parent) where T : DependencyObject
     {
         var foundChildren = new List<T>();

         if (parent == null) return foundChildren;

         int childCount = VisualTreeHelper.GetChildrenCount(parent);

         for (int i = 0; i < childCount; i++)
         {
             DependencyObject child = VisualTreeHelper.GetChild(parent, i);

             if (child is T foundChild)
             {
                 foundChildren.Add(foundChild);
             }

             foundChildren.AddRange(FindChildrenOfType<T>(child));
         }

         return foundChildren;
     }
 }
